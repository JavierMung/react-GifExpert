{"version":3,"sources":["components/AddCategory.js","Helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","categories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","className","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","GifExpertapp","ReactDOM","render","document","getElementById"],"mappings":"mMAWaA,EAAc,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,cAAcC,EAAgB,EAAhBA,WACvC,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,cADsB,CACtB,QAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBT,EAAc,CAACG,GAAF,mBAAgBF,KAC7BG,EAAc,MAMlB,gBACI,oBAAIM,UAAU,mCAAd,SAAkDP,IAClD,uBACIQ,KAAK,OACLC,MAAST,EACTU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,c,+BCXlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAI,SAACC,GAAO,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QARtB,kBAYZM,GAZY,4CAAH,sDCCPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OAEI,sBAAKR,UAAY,YAAjB,UACG,qBAAKsB,IAAKd,EAAKe,IAAKL,EAAOlB,UAAU,0CACrC,4BAAIkB,QCFFM,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAQtB,ECXyB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAU,WACNvB,EAAQC,GACHuB,MAAK,SAAAC,GACFH,EAAS,CACLd,KAAOiB,EACPL,SAAS,SAItB,CAACnB,IAIGoB,EDVeK,CAAazB,GAA7BO,EAAP,EAAOA,KAAKY,EAAZ,EAAYA,QAIX,OACI,qCACI,6BAAKnB,IACJmB,GAAW,4CACZ,8BAEQZ,EAAKE,KAAI,SAAAC,GACL,OACG,cAAC,EAAD,eAESA,GADCA,EAAIC,aEvB5Be,EAAe,WAEzB,MAAoCxC,mBAAS,CAAC,gBAA9C,mBAAOD,EAAP,KAAmBD,EAAnB,KAYA,OACK,qCACI,oBAAIU,UAAU,yCAAd,0BACA,cAAC,EAAD,CAAaV,cAAiBA,EAAeC,WAAcA,IAF/D,IAGI,uBAEA,oCAEQA,EAAWwB,KAAK,SAAAT,GAAQ,OACpB,aAD0B,CACzB,EAAD,CAEIA,SAAYA,GADLA,aC1B7B2B,G,MAAe,cAAC,EAAD,KAErBC,IAASC,OACLF,EACFG,SAASC,eAAe,W","file":"static/js/main.77d75894.chunk.js","sourcesContent":["/**\r\n * \r\n * ESTE COMPONENTE TOMA EL VALOR DEL INPUT Y LO CAMBIA EN TIEMPO REAL\r\n * RECIBE LAS CATEGORIAS DE LOS ANIMES EN FORMA DE ARREGLO\r\n * TAMBIÉN RECIBE EL SETCATEGORIES QUE AYUDA A AÑADIR UNA NUEVA CATEGORIA\r\n * \r\n */\r\n\r\nimport React, {useState} from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories,categories}) => {\r\n    const [inputValue, setinputValue] = useState(''); //HOOK QUE AYUDA A GUARDAR EL VALOR DEL INPUT PARA POSTERIORMENTE MANDARLO AL HOOK DE CATEGORIAS\r\n    const handleInputChange = (e) =>{\r\n        setinputValue(e.target.value);  // GUARDADO DEL INPUT EN EL HOOK\r\n    }\r\n\r\n    const handleSubmit = (e)=>{  //METODO QUE AYUDA A PREVENIR INSERCIONES EN BLANCO O REPETICIONES EN EL INPUT\r\n        e.preventDefault(); //EVITA QUE LA PAGINA SE RECARGUE CON CADA INPUT\r\n        //console.log('SubmitHecho');\r\n        if(inputValue.trim().length>2){\r\n            setCategories([inputValue,...categories]); //SE LE AGREGA UNA CATEGORIA AL HOOK, SIEMPRE AL PRINCIPIO\r\n            setinputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n    return (                  /// REGRESO DEL COMPONENTE A IMPRIMIR \r\n        <form onSubmit={handleSubmit}>   {/*  AL PRESIONAR ENTER SE INVOCA AL METODO PARA NO RECARGAR LA PAGINA* */}\r\n            <h1 className=\"animate_animated animate__shakeX\">{inputValue}</h1>\r\n            <input\r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = {handleInputChange} // AL PRESIONAR ENTER SE INVOCA AL METODO PARA CAMBIAR EL VALOR DEL HOOK\r\n                \r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n    categories: PropTypes.array.isRequired,\r\n}\r\n","//ARCHIVO QUE HACE LA PETICIÓN DE LOS GIFS A LA PAGINA \r\n//REGRESA UN ARREGLO CON INFORMACIÓN VALIOSA ACERCA DE LOS GIFS\r\n\r\nexport const getGifs = async( category )=>{ //SE LE PASA LA CATEGORIA QUE QUEREMOS BUSCAR\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=hRynliJUXXLBjTNvKPGbh5djOozOkEtA` //URL DONDE BUSCARA LOS GIFS\r\n    const resp = await fetch(url); //PETICION A LA PAGINA MEDIANTE EL URL\r\n    const {data} = await resp.json(); // DEVUELVE UNA PROMESA DONDE SE DESESTRUCTURA LA DATA \r\n    const gifs = data.map((img)=>{    //REGRESAMOS UN ARREGLO DE OBJETOS REFERENTE A LOS GIFS\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url,\r\n        }\r\n     });\r\n    \r\n    return gifs;\r\n}","//ESTE COMPONENTE IMPRIME LOS GIFS GRACIAS AL URL Y EL TITULO DEl MISMO\r\n\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    \r\n    return (\r\n       \r\n        <div className = 'boxImages'>\r\n           <img src={url} alt={title} className=\"animate__animated animate__rubberBand\"></img>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","//ESTE COMPONENTE VUELVE A RECIBIR LA DATA PERO CON ELLA ESTABLECE LA KEY DEL COMPONENTE Y TAMBIÉN EL LOADING LO IMPRIME EN PANTALLA \r\n\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../Helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {  //SE LE PASA LA GATEGORIA OSEA EL NOMBRE DEL ANIME\r\n    \r\n    // const [Images, setImages] = useState([]);\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(setImages)\r\n    // }, [category]);\r\n    \r\n   const {data,loading} = useFetchGifs(category); // SE REGRESA EL LOADING Y LA DATA PARA PODER DESESTRURAR LA INFO\r\n   \r\n   \r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3> \r\n            {loading && <p>Cargando...</p>}  \r\n            <div  >\r\n                {\r\n                    data.map(img => {  //SE MAPEA LA DATA PRA MANDAR AL COMPONENTE GIFGRIDITEM EL ID DE MI GIF EN LA KEY Y LA DATA DE LA IMAGEN \r\n                        return(\r\n                           <GifGridItem \r\n                                key={img.id}  ///**SE LE APLICA LA KEY AL COMPONENTE */\r\n                                {...img} \r\n                               // img = {img}\r\n                           />\r\n                        )\r\n                    })\r\n                }\r\n                 \r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","//ESTE COMPONENTE OBTIENE LA DATA DE LOS GIFS POR EL METODO GETGIFS Y REGRESA UN ARREGLO CON LOS DATOS DE LOS 10 GIFS Y VERIFICA SI SE HA HECHO LA PETICION O SIGUE CARGANDO\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport {getGifs} from '../Helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({  //HOOK QUE GUARDA LA INFORMACIÓN DE LOS GIFS Y EVALUAR EL LOADING\r\n        data: [],\r\n        loading: true,\r\n\r\n    });\r\n\r\n    useEffect(() => {     //HOOK PARA QUE SOLO SE REALICE CUANDO SE AGREGUE UN NUEVO ANIME\r\n        getGifs(category) //LLAMADA AL GETGIFS PARA OBTENER LOS DATOS DE LOS GIFS\r\n            .then(imgs => {\r\n                setState({  \r\n                    data:  imgs, //SE LE PASA LA INFO DE LOS GIFS OSEA UN ARREGLO\r\n                    loading: false //SE QUITO EL LOADING QUE ESTABA EN TRUE \r\n                });\r\n               \r\n            })\r\n    }, [category]);\r\n\r\n  \r\n\r\n    return state; //SE REGRESA EL HOOK STATE QUE SON LOS DATOS DE LOS GIFS Y EL LOADING \r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\n\r\n//COMPONENTE\r\nexport const GifExpertApp = ()=>{ \r\n   // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n   const [categories, setCategories] = useState(['Dragon Ball']);\r\n//    const handleAdd = ()=>{ \r\n//         setCategories([...categories, 'Naruto']);\r\n//     } \r\n\r\n    //setCategories puede tener un callback el cual tiene un argumento que es el valor del estado anterior\r\n    /**\r\n     * setCategories(cats => [...cats,'Naruto']);\r\n     * \r\n     */\r\n   \r\n\r\n   return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__slideInLeft\">GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories} categories = {categories}/> {/**COMPONENTE PARA AGREGAR ANIME AL HOOK CATEGORIA  */}\r\n            <hr/>\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            <ol >  {/**LISTA ORDENADA DE LOS ANIMES */}\r\n                {\r\n                    categories.map( category => ( //SE REALIZA UN MAPEAADO AL HOOK PARA PASAR CADA ELEMENTO AL GIF GRID\r\n                        <GifGrid\r\n                            key = {category}\r\n                            category = {category}\r\n                        />\r\n                    ) )\r\n                }\r\n            </ol>\r\n        </>\r\n\r\n\r\n    )\r\n\r\n\r\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\nconst GifExpertapp = <GifExpertApp/>\n\nReactDOM.render(\n    GifExpertapp,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}